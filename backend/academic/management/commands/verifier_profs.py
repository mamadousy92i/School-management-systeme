from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from users.models import Professeur
from academic.models import Classe

User = get_user_model()


class Command(BaseCommand):
    help = 'V√©rifie et affiche les professeurs principaux des classes'

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.SUCCESS('üìö V√âRIFICATION DES PROFESSEURS PRINCIPAUX'))
        self.stdout.write('='*70)
        
        # Lister toutes les classes
        classes = Classe.objects.all()
        
        if not classes.exists():
            self.stdout.write(self.style.ERROR('‚ùå Aucune classe trouv√©e'))
            self.stdout.write('   Ex√©cutez: python manage.py populate_db')
            return
        
        self.stdout.write(f'\nüìä {classes.count()} classe(s) trouv√©e(s)\n')
        
        sans_prof = []
        
        for classe in classes:
            if classe.professeur_principal:
                prof = classe.professeur_principal
                user = prof.user
                self.stdout.write(
                    f'‚úÖ {classe.nom:15s} ‚Üí Prof. Principal: {user.get_full_name():30s} (User: {user.username})'
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  {classe.nom:15s} ‚Üí Aucun professeur principal')
                )
                sans_prof.append(classe)
        
        # Si des classes sans prof principal
        if sans_prof:
            self.stdout.write('\n' + '='*70)
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  {len(sans_prof)} classe(s) sans professeur principal'))
            
            # Proposer d'assigner automatiquement
            profs = list(Professeur.objects.all())
            if profs:
                self.stdout.write(f'\nüí° Assignation automatique...\n')
                for i, classe in enumerate(sans_prof):
                    prof = profs[i % len(profs)]
                    classe.professeur_principal = prof
                    classe.save()
                    self.stdout.write(
                        f'   ‚úÖ {classe.nom} ‚Üí {prof.user.get_full_name()}'
                    )
                self.stdout.write(self.style.SUCCESS('\n‚úÖ Assignation termin√©e !'))
        
        # Lister tous les professeurs et leurs classes
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('üë®‚Äçüè´ PROFESSEURS ET LEURS CLASSES'))
        self.stdout.write('='*70 + '\n')
        
        professeurs = Professeur.objects.all()
        
        for prof in professeurs:
            user = prof.user
            mes_classes = Classe.objects.filter(professeur_principal=prof)
            
            if mes_classes.exists():
                classes_noms = ', '.join([c.nom for c in mes_classes])
                self.stdout.write(
                    f'‚úÖ {user.get_full_name():30s} (Login: {user.username:15s}) ‚Üí {classes_noms}'
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  {user.get_full_name():30s} (Login: {user.username:15s}) ‚Üí Aucune classe')
                )
        
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('‚ú® V√©rification termin√©e !'))
        self.stdout.write('='*70)
