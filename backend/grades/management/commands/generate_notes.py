from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from datetime import date, timedelta
from grades.models import Periode, TypeEvaluation, Note, MoyenneEleve
from academic.models import Eleve, Matiere
from users.models import Professeur
import random

User = get_user_model()


class Command(BaseCommand):
    help = 'G√©n√®re des notes de test pour tous les √©l√®ves'

    def add_arguments(self, parser):
        parser.add_argument(
            '--periode',
            type=int,
            help='ID de la p√©riode (trimestre)',
        )
        parser.add_argument(
            '--all',
            action='store_true',
            help='G√©n√©rer des notes pour toutes les p√©riodes',
        )

    def handle(self, *args, **kwargs):
        periode_id = kwargs.get('periode')
        generate_all = kwargs.get('all')

        self.stdout.write(self.style.SUCCESS('üé≤ G√©n√©ration de notes de test...'))
        self.stdout.write('='*60)

        # R√©cup√©rer les types d'√©valuation
        types_eval = list(TypeEvaluation.objects.all())
        if not types_eval:
            self.stdout.write(self.style.ERROR('‚ùå Aucun type d\'√©valuation trouv√©'))
            self.stdout.write('   Ex√©cutez d\'abord: python manage.py populate_db')
            return

        # D√©terminer les p√©riodes √† traiter
        if periode_id:
            periodes = Periode.objects.filter(id=periode_id)
        elif generate_all:
            periodes = Periode.objects.all()
        else:
            # Par d√©faut, utiliser la premi√®re p√©riode
            periodes = Periode.objects.all()[:1]

        if not periodes.exists():
            self.stdout.write(self.style.ERROR('‚ùå Aucune p√©riode trouv√©e'))
            return

        # R√©cup√©rer toutes les mati√®res
        matieres = list(Matiere.objects.all())
        if not matieres:
            self.stdout.write(self.style.ERROR('‚ùå Aucune mati√®re trouv√©e'))
            return

        # R√©cup√©rer tous les √©l√®ves
        eleves = list(Eleve.objects.filter(statut='actif'))
        if not eleves:
            self.stdout.write(self.style.ERROR('‚ùå Aucun √©l√®ve actif trouv√©'))
            return

        total_notes = 0

        for periode in periodes:
            self.stdout.write(f'\nüìÖ {periode.get_nom_display()}...')
            
            # Date de base pour les √©valuations
            date_debut = periode.date_debut
            date_fin = periode.date_fin
            
            # Pour chaque mati√®re
            for matiere in matieres:
                self.stdout.write(f'   üìö {matiere.nom}')
                
                # Obtenir le professeur de la classe (pour les notes)
                # On va utiliser le premier professeur disponible
                try:
                    prof = Professeur.objects.first()
                except:
                    prof = None
                
                # Pour chaque type d'√©valuation
                for type_eval in types_eval:
                    # G√©n√©rer une date d'√©valuation dans la p√©riode
                    delta_days = (date_fin - date_debut).days
                    if delta_days > 0:
                        random_days = random.randint(0, delta_days)
                        date_evaluation = date_debut + timedelta(days=random_days)
                    else:
                        date_evaluation = date_debut
                    
                    # Pour chaque √©l√®ve
                    notes_created = 0
                    for eleve in eleves:
                        # V√©rifier si la note n'existe pas d√©j√†
                        exists = Note.objects.filter(
                            eleve=eleve,
                            matiere=matiere,
                            periode=periode,
                            type_evaluation=type_eval
                        ).exists()
                        
                        if not exists:
                            # G√©n√©rer une note al√©atoire sur 10 (√©cole primaire)
                            # Distribution r√©aliste : plus de notes entre 5 et 8
                            rand = random.random()
                            if rand < 0.05:  # 5% de tr√®s mauvaises notes
                                note = round(random.uniform(2.5, 4.5), 2)
                            elif rand < 0.15:  # 10% de notes faibles
                                note = round(random.uniform(4.5, 6), 2)
                            elif rand < 0.70:  # 55% de notes moyennes/bonnes
                                note = round(random.uniform(6, 8), 2)
                            elif rand < 0.90:  # 20% de bonnes notes
                                note = round(random.uniform(8, 9), 2)
                            else:  # 10% d'excellentes notes
                                note = round(random.uniform(9, 10), 2)
                            
                            # Commentaires al√©atoires
                            commentaires = [
                                '', '', '',  # 60% sans commentaire
                                'Tr√®s bien',
                                'Bien',
                                'Peut mieux faire',
                                'Bon travail',
                                'Excellent',
                                '√Ä am√©liorer',
                                'Satisfaisant',
                                'Efforts √† fournir',
                            ]
                            
                            Note.objects.create(
                                eleve=eleve,
                                matiere=matiere,
                                periode=periode,
                                type_evaluation=type_eval,
                                valeur=note,
                                date_evaluation=date_evaluation,
                                professeur=prof,
                                commentaire=random.choice(commentaires)
                            )
                            notes_created += 1
                            total_notes += 1
                    
                    if notes_created > 0:
                        self.stdout.write(
                            f'      ‚úÖ {type_eval.get_nom_display()}: {notes_created} notes cr√©√©es'
                        )
            
            # Calculer les moyennes pour cette p√©riode
            self.stdout.write(f'\n   üßÆ Calcul des moyennes pour {periode.get_nom_display()}...')
            moyennes_count = 0
            
            for eleve in eleves:
                for matiere in matieres:
                    moyenne = MoyenneEleve.calculer_moyenne(eleve, matiere, periode)
                    if moyenne:
                        moyennes_count += 1
            
            self.stdout.write(
                self.style.SUCCESS(f'   ‚úÖ {moyennes_count} moyennes calcul√©es')
            )

        # R√©sum√©
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('‚ú® G√âN√âRATION TERMIN√âE !'))
        self.stdout.write('='*60)
        self.stdout.write(f'üìä STATISTIQUES:')
        self.stdout.write(f'   ‚Ä¢ Notes cr√©√©es: {total_notes}')
        self.stdout.write(f'   ‚Ä¢ P√©riodes trait√©es: {periodes.count()}')
        self.stdout.write(f'   ‚Ä¢ Mati√®res: {len(matieres)}')
        self.stdout.write(f'   ‚Ä¢ √âl√®ves: {len(eleves)}')
        self.stdout.write(f'   ‚Ä¢ Types d\'√©valuation: {len(types_eval)}')
        self.stdout.write('='*60)
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üí° Pour voir les notes:'))
        self.stdout.write('   ‚Ä¢ Frontend: http://localhost:5173/notes')
        self.stdout.write('   ‚Ä¢ Admin Django: http://localhost:8000/admin/grades/note/')
        self.stdout.write('='*60)
